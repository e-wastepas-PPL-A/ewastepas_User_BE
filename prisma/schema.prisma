generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  community_id     Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  email            String             @unique(map: "email") @db.VarChar(50)
  password         String?            @db.VarChar(255)
  phone            String?            @unique(map: "phone") @db.VarChar(255)
  date_of_birth    DateTime?          @db.Date
  address          String?            @db.VarChar(255)
  photo            String?            @db.VarChar(255)
  is_verified      Boolean?           @default(false)
  otp_code         String?            @db.VarChar(6)
  otp_expiry       DateTime?          @db.Timestamp(0)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  cart             cart[]
  community_points community_points[]
  pickup_waste     pickup_waste[]
}

model community_points {
  points_id    Int        @id @default(autoincrement())
  community_id Int?
  total_points Int?       @default(0)
  created_at   DateTime?  @default(now()) @db.Timestamp(0)
  updated_at   DateTime?  @default(now()) @db.Timestamp(0)
  community    community? @relation(fields: [community_id], references: [community_id], onDelete: Cascade, map: "community_points_ibfk_1")

  @@index([community_id], map: "community_id")
}

model cart {
  cart_id       Int                @id @default(autoincrement())
  id_community  Int?
  id_waste      Int?
  id_pickup     Int?
  pickup_status cart_pickup_status
  created_at    DateTime?          @default(now()) @db.Timestamp(0)
  updated_at    DateTime?          @default(now()) @db.Timestamp(0)
  community     community?         @relation(fields: [id_community], references: [community_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_1")
  waste         waste?             @relation(fields: [id_waste], references: [waste_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_2")
  pickup_waste  pickup_waste?      @relation(fields: [id_pickup], references: [pickup_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_3")
  cart_detail   cart_detail[]

  @@index([id_community], map: "id_community")
  @@index([id_pickup], map: "id_pickup")
  @@index([id_waste], map: "id_waste")
}

model cart_detail {
  cart_detail_id Int       @id @default(autoincrement())
  cart_id        Int
  waste_id       Int
  quantity       Int
  points         Int
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
  cart           cart      @relation(fields: [cart_id], references: [cart_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_detail_ibfk_1")
  waste          waste     @relation(fields: [waste_id], references: [waste_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_detail_ibfk_2")

  @@index([cart_id], map: "cart_id")
  @@index([waste_id], map: "waste_id")
}

model courier {
  courier_id     Int             @id @default(autoincrement())
  name           String          @db.VarChar(50)
  email          String          @unique(map: "email") @db.VarChar(50)
  password       String?         @db.VarChar(255)
  phone          String?         @db.VarChar(15)
  date_of_birth  DateTime?       @db.Date
  address        String?         @db.VarChar(255)
  account_number String?         @db.VarChar(50)
  nik            String?         @unique(map: "nik") @db.VarChar(16)
  ktp_url        String?         @db.VarChar(255)
  kk_url         String?         @db.VarChar(255)
  photo          String?         @db.VarChar(255)
  is_verified    Boolean?        @default(false)
  status         courier_status? @default(Pending)
  otp_code       String?         @db.VarChar(6)
  otp_expiry     DateTime?       @db.Timestamp(0)
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  updated_at     DateTime?       @default(now()) @db.Timestamp(0)
  pickup_waste   pickup_waste[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model dropbox {
  dropbox_id       Int                       @id @default(autoincrement())
  name             String                    @db.VarChar(50)
  address          String                    @db.VarChar(255)
  district_address dropbox_district_address?
  longitude        Decimal?                  @db.Decimal(11, 8)
  latitude         Decimal?                  @db.Decimal(11, 8)
  capacity         Int?                      @default(0)
  status           dropbox_status?           @default(Available)
  created_at       DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at       DateTime?                 @default(now()) @db.Timestamp(0)
  pickup_waste     pickup_waste[]
}

model management {
  management_id Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  email         String         @unique(map: "email") @db.VarChar(50)
  password      String?        @db.VarChar(100)
  date_of_birth DateTime?      @db.Date
  address       String?        @db.VarChar(255)
  phone         String         @unique(map: "phone") @db.VarChar(15)
  photo         String?        @db.VarChar(255)
  is_verified   Boolean?       @default(false)
  is_admin      Boolean?       @default(false)
  otp_code      String?        @db.VarChar(6)
  otp_expiry    DateTime?      @db.Timestamp(0)
  created_at    DateTime?      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?      @default(now()) @db.Timestamp(0)
  pickup_waste  pickup_waste[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pickup_detail {
  pickup_id     Int?
  waste_id      Int?
  quantity      Int?          @default(0)
  points        Int?          @default(0)
  waste_type_id Int?
  waste_type    waste_type?   @relation(fields: [waste_type_id], references: [waste_type_id], map: "pickup_detail_fk")
  pickup_waste  pickup_waste? @relation(fields: [pickup_id], references: [pickup_id], map: "pickup_detail_ibfk_1")
  waste         waste?        @relation(fields: [waste_id], references: [waste_id], map: "pickup_detail_ibfk_2")

  @@index([pickup_id], map: "pickup_id")
  @@index([waste_id], map: "waste_id")
  @@index([waste_type_id], map: "waste_type_id")
  @@ignore
}

model pickup_waste {
  pickup_id      Int                         @id @default(autoincrement())
  pickup_date    DateTime                    @db.Date
  pickup_time    DateTime                    @db.Time(0)
  pickup_address String                      @db.VarChar(255)
  pickup_status  pickup_waste_pickup_status? @default(Menunggu_Penjemputan)
  dropbox_id     Int?
  courier_id     Int?
  community_id   Int?
  management_id  Int?
  reason         String?                     @db.Text
  created_at     DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at     DateTime?                   @default(now()) @db.Timestamp(0)
  cart           cart[]
  pickup_detail  pickup_detail[]             @ignore
  dropbox        dropbox?                    @relation(fields: [dropbox_id], references: [dropbox_id], map: "pickup_waste_ibfk_1")
  courier        courier?                    @relation(fields: [courier_id], references: [courier_id], map: "pickup_waste_ibfk_2")
  management     management?                 @relation(fields: [management_id], references: [management_id], map: "pickup_waste_ibfk_3")
  community      community?                  @relation(fields: [community_id], references: [community_id], map: "pickup_waste_ibfk_4")

  @@index([community_id], map: "community_id")
  @@index([courier_id], map: "courier_id")
  @@index([dropbox_id], map: "dropbox_id")
  @@index([management_id], map: "management_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model waste {
  waste_id      Int             @id @default(autoincrement())
  waste_name    String          @db.VarChar(255)
  point         Int?            @default(0)
  waste_type_id Int?
  image         String?         @db.VarChar(255)
  description   String?         @db.Text
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  cart          cart[]
  cart_detail   cart_detail[]
  pickup_detail pickup_detail[] @ignore
  waste_type    waste_type?     @relation(fields: [waste_type_id], references: [waste_type_id], onDelete: Cascade, map: "waste_ibfk_1")

  @@index([waste_type_id], map: "waste_type_id")
}

model waste_type {
  waste_type_id   Int                        @id @default(autoincrement())
  waste_type_name waste_type_waste_type_name
  image           String?                    @db.VarChar(255)
  created_at      DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at      DateTime?                  @default(now()) @db.Timestamp(0)
  pickup_detail   pickup_detail[]            @ignore
  waste           waste[]
}

enum waste_type_waste_type_name {
  Peralatan_rumah_tangga_besar @map("Peralatan rumah tangga besar")
  Peralatan_rumah_tangga_kecil @map("Peralatan rumah tangga kecil")
  Peralatan_IT                 @map("Peralatan IT")
  Lampu
  Mainan
  Peralatan_elektronik_lainnya @map("Peralatan elektronik lainnya")
}

enum dropbox_district_address {
  Bandung_Utara           @map("Bandung Utara")
  Bandung_Selatan         @map("Bandung Selatan")
  Bandung_Timur           @map("Bandung Timur")
  Bandung_Barat           @map("Bandung Barat")
  Cimahi
  Kabupaten_Bandung       @map("Kabupaten Bandung")
  Kabupaten_Bandung_Barat @map("Kabupaten Bandung Barat")
}

enum cart_pickup_status {
  Menunggu_Penjemputan  @map("Menunggu Penjemputan")
  Dalam_Perjalanan      @map("Dalam Perjalanan")
  Sampah_telah_dijemput @map("Sampah telah dijemput")
  Pesanan_Selesai       @map("Pesanan Selesai")
  Penjemputan_Gagal     @map("Penjemputan Gagal")
}

enum pickup_waste_pickup_status {
  Menunggu_Penjemputan  @map("Menunggu Penjemputan")
  Dalam_Perjalanan      @map("Dalam Perjalanan")
  Sampah_telah_dijemput @map("Sampah telah dijemput")
  Pesanan_Selesai       @map("Pesanan Selesai")
  Penjemputan_Gagal     @map("Penjemputan Gagal")
}

enum dropbox_status {
  Full
  Available
}

enum courier_status {
  Pending
  Approved
  Reject
}
